name: Build and Deploy Node.js App

on:
  pull_request:
    branches: [ "main" ]
    types: [closed]

jobs:
  integration-test:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true

    env:
      DB_HOST: 127.0.0.1
      DB_DATABASE: test_db
      DB_USER: root
      DB_PASSWORD: root

    defaults:
      run:
        working-directory: ./webapp
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'  

      - name: Install Dependencies
        run: npm install
        
      - name: Setup MySQL
        run: |
          sudo /etc/init.d/mysql start
          mysql -e 'CREATE DATABASE test_db;' -uroot -proot

      - name: Init MySQL
        run: node users.js
        
      - name: Run Integration Tests
        run: npm test 

  packer-format-validate:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup Packer
        uses: hashicorp/setup-packer@v3.0.0
        with:
          version: '1.10.0'

      - name: Packer init
        run: packer init *.pkr.hcl    

      - name: Packer fmt
        run: packer fmt -check -diff *.pkr.hcl

      - name: Packer validate
        run: packer validate *.pkr.hcl  

  build-artifact:
    needs: integration-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Archive Production Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nodejs-artifact
          path: |
            webapp/
            webapp.service
            ops-agent-config.yaml

  build-image:
    needs: 
      - build-artifact
      - packer-format-validate
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.build_image.outputs.IMAGE_NAME }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Download Node.js Artifact
        uses: actions/download-artifact@v4
        with:
          name: nodejs-artifact

      - name: Setup Packer
        uses: hashicorp/setup-packer@v3.0.0
        with:
          version: '1.10.0'

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          project_id: "${{ vars.GCP_PROJECT_ID }}"
          credentials_json: '${{ secrets.GOOGLE_SA_CREDENTIALS }}'
          
      - name: Packer init
        run: packer init *.pkr.hcl 
        
      - name: Build Custom Image with Packer
        id: build_image
        run: |
          packer build *.pkr.hcl
          echo "IMAGE_NAME=$(jq -r '.builds[-1].artifact_id' packer-manifest.json | cut -d':' -f2)" >> $GITHUB_OUTPUT

  update-instance-template:
    needs: build-image
    runs-on: ubuntu-latest

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          project_id: "${{ vars.GCP_PROJECT_ID }}"
          credentials_json: '${{ secrets.GOOGLE_SA_CREDENTIALS }}'

      - name: Config Variables
        run: |
          echo "INSTANCE_TEMPLATE_NAME=${{ vars.INSTANCE_TEMPLATE_NAME }}-$(date +'%Y%m%dT%H%M%S')" >> $GITHUB_ENV
          echo "IMAGE_NAME=${{ needs.build-image.outputs.image_name }}" >> $GITHUB_ENV
          echo "KMS_KEY_ID=projects/${{ vars.GCP_PROJECT_ID }}/locations/${{ vars.GCP_REGION }}/keyRings/${{ vars.WEBAPP_KEY_RING }}/cryptoKeys/${{ vars.VM_KEY }}" >> $GITHUB_ENV
          echo "NETWORK_SELF_LINK=https://www.googleapis.com/compute/v1/projects/${{ vars.GCP_PROJECT_ID }}/global/networks/my-vpc" >> $GITHUB_ENV
          echo "SUBNETWORK_SELF_LINK=https://www.googleapis.com/compute/v1/projects/${{ vars.GCP_PROJECT_ID }}/regions/${{ vars.GCP_REGION }}/subnetworks/webapp" >> $GITHUB_ENV
          echo "SERVICE_ACCOUNT_EMAIL=webapp-service-account@${{ vars.GCP_PROJECT_ID }}.iam.gserviceaccount.com" >> $GITHUB_ENV          

      - name: Create New Instance Template
        run: |
          gcloud compute instance-templates create ${{ env.INSTANCE_TEMPLATE_NAME }} \
            --machine-type=e2-small \
            --instance-template-region=${{ vars.GCP_REGION }} \
            --tags=web-servers \
            --image=projects/${{ vars.GCP_PROJECT_ID }}/global/images/${{ env.IMAGE_NAME }} \
            --boot-disk-size=100GB \
            --boot-disk-type=pd-balanced \
            --boot-disk-kms-key=${{ env.KMS_KEY_ID }} \
            --network-interface="network=${{ env.NETWORK_SELF_LINK }},subnet=${{ env.SUBNETWORK_SELF_LINK }}" \
            --metadata=startup-script='#!/bin/bash
            echo "DB_DATABASE=${{ vars.DB_DATABASE }}" >> /etc/environment
            echo "DB_USER=${{ vars.DB_USER }}" >> /etc/environment
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> /etc/environment
            echo "DB_HOST=${{ vars.DB_HOST }}" >> /etc/environment' \
            --service-account=${{ env.SERVICE_ACCOUNT_EMAIL }} \
            --scopes=cloud-platform

      - name: Update Managed Instance Group with New Template
        run: |
          gcloud compute instance-groups managed set-instance-template ${{ vars.INSTANCE_GROUP_NAME }} \
            --template=projects/${{ vars.GCP_PROJECT_ID }}/regions/${{ vars.GCP_REGION }}/instanceTemplates/${{ env.INSTANCE_TEMPLATE_NAME }} \
            --region=${{ vars.GCP_REGION }}
    
      - name: Recreate Instances in Managed Instance Group
        run: |
          gcloud compute instance-groups managed rolling-action start-update ${{ vars.INSTANCE_GROUP_NAME }} \
            --version=template=projects/${{ vars.GCP_PROJECT_ID }}/regions/${{ vars.GCP_REGION }}/instanceTemplates/${{ env.INSTANCE_TEMPLATE_NAME }} \
            --region=${{ vars.GCP_REGION }} \
            --type=proactive
  
      - name: Wait for MIG Refresh to Complete
        run: |
          gcloud compute instance-groups managed wait-until ${{ vars.INSTANCE_GROUP_NAME }} \
            --version-target-reached \
            --region=${{ vars.GCP_REGION }}

      